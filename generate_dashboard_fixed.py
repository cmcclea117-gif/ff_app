#!/usr/bin/env python3
"""
Fantasy Football Dashboard Generator V3.4 - COMPLETE EDITION
Generates a fully self-contained HTML with embedded data and full UI
"""

import csv
import json
import re
from pathlib import Path

# ==================== CONFIGURATION ====================
HISTORICAL_FILES = {
    'PPR': {
        2022: '2022_FantasyPros_Fantasy_Football_Points_PPR.csv',
        2023: '2023_FantasyPros_Fantasy_Football_Points_PPR.csv',
        2024: '2024_FantasyPros_Fantasy_Football_Points_PPR.csv',
    },
    'HALF_PPR': {
        2022: '2022_FantasyPros_Fantasy_Football_Points_HALF.csv',
        2023: '2023_FantasyPros_Fantasy_Football_Points_HALF.csv',
        2024: '2024_FantasyPros_Fantasy_Football_Points_HALF.csv',
    },
    'STANDARD': {
        2022: '2022_FantasyPros_Fantasy_Football_Points.csv',
        2023: '2023_FantasyPros_Fantasy_Football_Points.csv',
        2024: '2024_FantasyPros_Fantasy_Football_Points.csv',
    }
}

CURRENT_SEASON_FILE = 'FantasyPros_Fantasy_Football_Points_PPR.csv'
DATA_FOLDER = 'historical_data'
OUTPUT_FILE = 'fantasy_dashboard_v34_complete.html'

# ==================== FUNCTIONS ====================

def parse_csv_to_compact(filepath):
    """Parse FantasyPros CSV and convert to compact format."""
    compact_data = []
    
    with open(filepath, 'r', encoding='utf-8') as f:
        reader = csv.DictReader(f)
        
        for row in reader:
            if row is None or not row:
                continue
            
            player = (row.get('Player', '') or '').strip()
            pos = (row.get('Pos', '') or '').strip()
            pos = ''.join(c for c in pos if not c.isdigit())
            
            if not player or pos not in ['QB', 'RB', 'WR', 'TE']:
                continue
            
            weeks = {}
            for week_num in range(1, 19):
                week_val = (row.get(str(week_num), '') or '').strip()
                if week_val and week_val not in ['-', 'BYE', '']:
                    try:
                        weeks[week_num] = float(week_val)
                    except ValueError:
                        pass
            
            compact_data.append({'p': player, 'pos': pos, 'w': weeks})
    
    return compact_data


def parse_projections_csv(filepath):
    """Parse FantasyPros ECR rankings CSV and convert to projection format."""
    projections = []
    
    with open(filepath, 'r', encoding='utf-8') as f:
        reader = csv.DictReader(f)
        
        for row in reader:
            if row is None or not row:
                continue
            
            player = (row.get('PLAYER NAME', '') or row.get('Player', '') or '').strip()
            pos_raw = (row.get('POS', '') or row.get('Pos', '') or '').strip()
            
            # Extract position and position rank (e.g., "QB1" -> pos="QB", rank=1)
            pos = ''.join(c for c in pos_raw if c.isalpha())
            pos_rank_str = ''.join(c for c in pos_raw if c.isdigit())
            
            if not player or pos not in ['QB', 'RB', 'WR', 'TE']:
                continue
            
            try:
                # Use position rank (QB1, RB2, etc.) not overall rank
                ecr = float(pos_rank_str) if pos_rank_str else 0
                std_dev = float(row.get('STD.DEV', '') or '0')
                
                if ecr == 0:
                    continue
                
                # Store position-based ECR rank - JavaScript will convert to points
                projections.append({
                    'p': player,
                    'pos': pos,
                    'ecr': ecr,  # Position-based Expert Consensus Rank (QB1=1, not overall #2)
                    'std': std_dev  # Standard deviation of ranks
                })
            except (ValueError, TypeError):
                continue
    
    return projections


def load_all_historical_data():
    """Load historical data."""
    all_data = {}
    
    for scoring_format, years in HISTORICAL_FILES.items():
        all_data[scoring_format] = {}
        
        for year, filename in years.items():
            filepath = Path(DATA_FOLDER) / filename
            if not filepath.exists():
                print(f"‚ö†Ô∏è  WARNING: {filepath} not found")
                continue
            
            print(f"üìÇ Loading {scoring_format} {year}...")
            data = parse_csv_to_compact(filepath)
            all_data[scoring_format][str(year)] = data
            print(f"   ‚úÖ {len(data)} players")
    
    return all_data


def load_current_season():
    """Load 2025 current season data."""
    filepath = Path(DATA_FOLDER) / CURRENT_SEASON_FILE
    if not filepath.exists():
        print(f"‚ö†Ô∏è  2025 results not found: {filepath}")
        return None
    
    print(f"\nüìÇ Loading 2025 season...")
    data = parse_csv_to_compact(filepath)
    max_week = max([max(p['w'].keys()) for p in data if p['w']], default=0)
    print(f"   ‚úÖ {len(data)} players, Week {max_week}")
    
    return {'data': data, 'current_week': max_week}


def load_weekly_projections():
    """Auto-detect and load weekly projection files."""
    projections = {}
    data_folder = Path(DATA_FOLDER)
    
    print(f"\nüìÇ Scanning projections...")
    all_csvs = list(data_folder.glob('*.csv'))
    proj_csvs = [f for f in all_csvs if '2025' in f.name and 
                 f.name != CURRENT_SEASON_FILE and
                 not any(y in f.name for y in ['2022','2023','2024'])]
    
    for filepath in proj_csvs:
        week_num = None
        match1 = re.search(r'[\s_-](\d+)\.csv$', filepath.name, re.I)
        if match1:
            week_num = int(match1.group(1))
        if not week_num:
            match2 = re.search(r'week[\s_]*(\d+)', filepath.name, re.I)
            if match2:
                week_num = int(match2.group(1))
        
        if week_num and 1 <= week_num <= 18:
            proj_data = parse_projections_csv(filepath)
            if proj_data:
                projections[week_num] = proj_data
                print(f"   üìä Week {week_num}: {len(proj_data)} players")
    
    if projections:
        weeks = sorted(projections.keys())
        print(f"\n   ‚úÖ {len(weeks)} weeks loaded: {', '.join(map(str, weeks))}")
    
    return projections


def generate_complete_html(historical_data, current_season, projections):
    """Generate complete HTML with full V3.2 UI."""
    
    hist_json = json.dumps(historical_data, separators=(',', ':'))
    season_json = json.dumps(current_season, separators=(',', ':'))
    proj_json = json.dumps(projections, separators=(',', ':'))
    
    total_kb = (len(hist_json) + len(season_json) + len(proj_json)) / 1024
    print(f"\nüìä Data: Historical {len(hist_json)/1024:.1f}KB + Season {len(season_json)/1024:.1f}KB + Proj {len(proj_json)/1024:.1f}KB = {total_kb:.1f}KB")
    
    cw = current_season.get('current_week', 7) if current_season else 7
    nw = cw + 1
    pw = f"{min(projections.keys())}-{max(projections.keys())}" if projections else "N/A"
    
    html = f'''<!DOCTYPE html>
<html lang="en">
<head>
<meta charset="UTF-8">
<meta name="viewport" content="width=device-width, initial-scale=1.0">
<title>Fantasy Football Dashboard V3.4</title>
<style>
* {{
  margin: 0;
  padding: 0;
  box-sizing: border-box;
}}

body {{
  font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
  background: linear-gradient(135deg, #0f2027 0%, #203a43 50%, #2c5364 100%);
  color: #ecf0f1;
  min-height: 100vh;
  padding: 20px;
}}

.container {{
  max-width: 1800px;
  margin: 0 auto;
}}

h1 {{
  text-align: center;
  margin-bottom: 20px;
  font-size: 2.5em;
  text-shadow: 2px 2px 4px rgba(0,0,0,0.3);
}}

/* Upload Section */
.upload-section {{
  background: rgba(255,255,255,0.1);
  border-radius: 15px;
  padding: 20px;
  margin-bottom: 20px;
  backdrop-filter: blur(10px);
}}

.upload-section h2 {{
  margin-bottom: 15px;
  font-size: 1.3em;
}}

.controls {{
  display: flex;
  gap: 15px;
  flex-wrap: wrap;
  align-items: center;
}}

.control-group {{
  display: flex;
  flex-direction: column;
  gap: 5px;
}}

.control-group label {{
  font-size: 0.9em;
  color: #bdc3c7;
}}

.control-group input,
.control-group select {{
  padding: 8px 12px;
  border: 2px solid rgba(255,255,255,0.2);
  border-radius: 8px;
  background: rgba(255,255,255,0.1);
  color: #ecf0f1;
  font-size: 1em;
}}

.control-group input:focus,
.control-group select:focus {{
  outline: none;
  border-color: #3498db;
}}

button {{
  padding: 10px 20px;
  border: none;
  border-radius: 8px;
  background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
  color: white;
  font-size: 1em;
  cursor: pointer;
  transition: transform 0.2s, box-shadow 0.2s;
  font-weight: 600;
}}

button:hover {{
  transform: translateY(-2px);
  box-shadow: 0 5px 15px rgba(102, 126, 234, 0.4);
}}

button:active {{
  transform: translateY(0);
}}

.status {{
  margin-top: 10px;
  padding: 10px;
  border-radius: 8px;
  font-size: 0.95em;
}}

.status.success {{
  background: rgba(46, 204, 113, 0.2);
  border: 1px solid #2ecc71;
}}

.status.error {{
  background: rgba(231, 76, 60, 0.2);
  border: 1px solid #e74c3c;
}}

/* Tab Navigation */
.tab-container {{
  background: rgba(255,255,255,0.05);
  border-radius: 15px;
  padding: 20px;
  backdrop-filter: blur(10px);
}}

.tab-nav {{
  display: flex;
  gap: 10px;
  margin-bottom: 20px;
  flex-wrap: wrap;
}}

.tab-btn {{
  padding: 12px 24px;
  border: none;
  border-radius: 10px;
  background: rgba(255,255,255,0.1);
  color: #bdc3c7;
  cursor: pointer;
  transition: all 0.3s;
  font-weight: 600;
}}

.tab-btn:hover {{
  background: rgba(255,255,255,0.2);
  color: #ecf0f1;
}}

.tab-btn.active {{
  background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
  color: white;
  transform: translateY(-2px);
  box-shadow: 0 5px 15px rgba(102, 126, 234, 0.4);
}}

.tab-content {{
  display: none;
}}

.tab-content.active {{
  display: block;
  animation: fadeIn 0.3s;
}}

@keyframes fadeIn {{
  from {{ opacity: 0; transform: translateY(10px); }}
  to {{ opacity: 1; transform: translateY(0); }}
}}

/* Stats Cards */
.stats-cards {{
  display: grid;
  grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));
  gap: 15px;
  margin-bottom: 20px;
}}

.stat-card {{
  background: rgba(255,255,255,0.1);
  border-radius: 10px;
  padding: 15px;
  text-align: center;
  border-left: 4px solid #3498db;
}}

.stat-card h3 {{
  font-size: 0.9em;
  color: #bdc3c7;
  margin-bottom: 5px;
}}

.stat-card .value {{
  font-size: 1.8em;
  font-weight: bold;
  color: #3498db;
}}

/* Filters */
.filters {{
  display: flex;
  gap: 15px;
  margin-bottom: 20px;
  flex-wrap: wrap;
  align-items: center;
}}

.filter-group {{
  display: flex;
  flex-direction: column;
  gap: 5px;
}}

.filter-group label {{
  font-size: 0.9em;
  color: #bdc3c7;
}}

.filter-group select,
.filter-group input {{
  padding: 8px 12px;
  border: 2px solid rgba(255,255,255,0.2);
  border-radius: 8px;
  background: rgba(255,255,255,0.1);
  color: #ecf0f1;
  font-size: 1em;
}}

/* Position Buttons */
.position-buttons {{
  display: flex;
  gap: 10px;
  margin-bottom: 20px;
  flex-wrap: wrap;
}}

.pos-btn {{
  padding: 10px 20px;
  border: 2px solid rgba(255,255,255,0.2);
  border-radius: 8px;
  background: rgba(255,255,255,0.1);
  color: #ecf0f1;
  cursor: pointer;
  transition: all 0.3s;
  font-weight: 600;
}}

.pos-btn:hover {{
  background: rgba(255,255,255,0.2);
}}

.pos-btn.active {{
  border-color: #3498db;
  background: rgba(52, 152, 219, 0.3);
  color: #3498db;
}}

/* Tables */
.table-container {{
  overflow-x: auto;
  border-radius: 10px;
  background: rgba(255,255,255,0.05);
}}

table {{
  width: 100%;
  border-collapse: collapse;
  min-width: 800px;
}}

thead {{
  background: rgba(255,255,255,0.1);
  position: sticky;
  top: 0;
  z-index: 10;
}}

th {{
  padding: 12px;
  text-align: left;
  font-weight: 600;
  color: #3498db;
  cursor: pointer;
  user-select: none;
  white-space: nowrap;
}}

th:hover {{
  background: rgba(255,255,255,0.15);
}}

th.sortable::after {{
  content: ' ‚áÖ';
  color: #7f8c8d;
}}

th.sort-asc::after {{
  content: ' ‚Üë';
  color: #3498db;
}}

th.sort-desc::after {{
  content: ' ‚Üì';
  color: #3498db;
}}

td {{
  padding: 10px 12px;
  border-bottom: 1px solid rgba(255,255,255,0.1);
}}

tbody tr {{
  transition: background 0.2s;
}}

tbody tr:hover {{
  background: rgba(255,255,255,0.1);
}}

/* Position Colors */
.pos-QB {{ border-left: 4px solid #e74c3c; }}
.pos-RB {{ border-left: 4px solid #2ecc71; }}
.pos-WR {{ border-left: 4px solid #3498db; }}
.pos-TE {{ border-left: 4px solid #f39c12; }}

/* Tier Badges */
.badge {{
  padding: 4px 10px;
  border-radius: 12px;
  font-size: 0.85em;
  font-weight: 600;
  display: inline-block;
}}

.badge.elite {{
  background: #2ecc71;
  color: white;
}}

.badge.high {{
  background: #3498db;
  color: white;
}}

.badge.mid {{
  background: #f39c12;
  color: white;
}}

.badge.stream {{
  background: #95a5a6;
  color: white;
}}

/* Trend Indicators */
.trend-up {{ color: #2ecc71; }}
.trend-down {{ color: #e74c3c; }}
.trend-stable {{ color: #95a5a6; }}

/* Roster Highlight */
.rostered {{
  background: rgba(52, 152, 219, 0.15);
  font-weight: 600;
}}

.my-roster {{
  background: rgba(46, 204, 113, 0.15);
  font-weight: 600;
}}

/* Priority Icons */
.priority-hot {{ color: #e74c3c; font-size: 1.2em; }}
.priority-star {{ color: #f39c12; font-size: 1.2em; }}
.priority-watch {{ color: #95a5a6; font-size: 1.2em; }}

/* Lineup Optimizer */
.lineup-config {{
  display: grid;
  grid-template-columns: repeat(auto-fit, minmax(150px, 1fr));
  gap: 15px;
  margin-bottom: 20px;
}}

.lineup-results {{
  margin-top: 20px;
}}

.starters-grid {{
  display: grid;
  grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));
  gap: 15px;
  margin-bottom: 20px;
}}

.starter-card {{
  background: rgba(46, 204, 113, 0.2);
  border: 2px solid #2ecc71;
  border-radius: 10px;
  padding: 15px;
}}

.starter-card h4 {{
  color: #2ecc71;
  margin-bottom: 10px;
}}

.bench-section {{
  background: rgba(255,255,255,0.05);
  border-radius: 10px;
  padding: 15px;
}}

.bench-section h3 {{
  margin-bottom: 10px;
  color: #95a5a6;
}}

.bench-list {{
  display: grid;
  grid-template-columns: repeat(auto-fit, minmax(250px, 1fr));
  gap: 10px;
}}

/* Historical Tables */
.historical-section {{
  margin-bottom: 30px;
}}

.historical-section h3 {{
  margin-bottom: 15px;
  padding: 10px;
  background: rgba(255,255,255,0.1);
  border-radius: 8px;
  border-left: 4px solid #3498db;
}}

/* Responsive */
@media (max-width: 768px) {{
  h1 {{ font-size: 1.8em; }}
  .controls {{ flex-direction: column; }}
  .tab-nav {{ flex-direction: column; }}
  .filters {{ flex-direction: column; }}
  .stats-cards {{ grid-template-columns: 1fr; }}
}}
</style>
</head>
<body>

<div class="container">
  <h1>üèà Fantasy Football Dashboard V3.4</h1>
  
  <!-- Upload Section -->
  <div class="upload-section">
    <h2>‚öôÔ∏è Configuration</h2>
    <div class="controls">
      <div class="control-group">
        <label>Scoring Format:</label>
        <select id="scoringFormat">
          <option value="PPR">PPR</option>
          <option value="HALF_PPR">Half PPR</option>
          <option value="STANDARD">Standard</option>
        </select>
      </div>
      
      <div class="control-group">
        <label>Sleeper Username:</label>
        <input type="text" id="sleeperUsername" placeholder="username">
      </div>
      
      <div class="control-group">
        <label>League ID:</label>
        <input type="text" id="leagueId" placeholder="123456789">
      </div>
      
      <button onclick="connectToSleeper()" style="align-self: flex-end;">Connect to Sleeper</button>
    </div>
    <div id="statusMessage"></div>
  </div>
  
  <!-- Tab Container -->
  <div class="tab-container">
    <div class="tab-nav">
      <button class="tab-btn active" onclick="switchTab('projections')">üìä Projections</button>
      <button class="tab-btn" onclick="switchTab('reliability')">üéØ Reliability</button>
      <button class="tab-btn" onclick="switchTab('rankings')">üìà Rankings</button>
      <button class="tab-btn" onclick="switchTab('waiver')">üî• Waiver Targets</button>
      <button class="tab-btn" onclick="switchTab('lineups')">‚ö° Lineup Optimizer</button>
      <button class="tab-btn" onclick="switchTab('matchups')">‚öîÔ∏è Matchups</button>
      <button class="tab-btn" onclick="switchTab('historical')">üìö Historical</button>
    </div>
    
    <!-- Projections Tab -->
    <div id="projections" class="tab-content active">
      <div class="stats-cards" id="statsCards"></div>
      
      <div class="filters">
        <div class="filter-group">
          <label>Position:</label>
          <select id="posFilter" onchange="renderProjectionsTable()">
            <option value="ALL">All Positions</option>
            <option value="QB">QB</option>
            <option value="RB">RB</option>
            <option value="WR">WR</option>
            <option value="TE">TE</option>
          </select>
        </div>
        
        <div class="filter-group">
          <label>Roster Filter:</label>
          <select id="rosterFilter" onchange="renderProjectionsTable()">
            <option value="ALL">All Players</option>
            <option value="MY_ROSTER">My Roster</option>
            <option value="AVAILABLE">Available</option>
          </select>
        </div>
        
        <div class="filter-group">
          <label>Search Player:</label>
          <input type="text" id="searchBox" placeholder="Type name..." oninput="renderProjectionsTable()">
        </div>
      </div>
      
      <div class="table-container">
        <table id="projectionsTable">
          <thead>
            <tr>
              <th>Player</th>
              <th>Pos</th>
              <th>Rank</th>
              <th>Week {nw} Proj</th>
              <th>Floor-Ceiling</th>
              <th>Tier</th>
              <th>FP Acc</th>
              <th>Trend</th>
            </tr>
          </thead>
          <tbody></tbody>
        </table>
      </div>
    </div>
    
    <!-- Reliability Tab -->
    <div id="reliability" class="tab-content">
      <div class="table-container">
        <table id="reliabilityTable">
          <thead>
            <tr>
              <th class="sortable" onclick="sortReliability('player')">Player</th>
              <th class="sortable" onclick="sortReliability('pos')">Pos</th>
              <th class="sortable" onclick="sortReliability('games')">Games</th>
              <th class="sortable" onclick="sortReliability('correlation')">FP Accuracy</th>
              <th class="sortable" onclick="sortReliability('mae')">MAE</th>
              <th class="sortable" onclick="sortReliability('accuracy')">Within 3 Ranks %</th>
              <th class="sortable" onclick="sortReliability('avgScore')">Avg Score</th>
              <th class="sortable" onclick="sortReliability('avgDiff')">Avg Diff</th>
            </tr>
          </thead>
          <tbody></tbody>
        </table>
      </div>
    </div>
    
    <!-- Rankings Tab -->
    <div id="rankings" class="tab-content">
      <div class="position-buttons">
        <button class="pos-btn active" onclick="renderRankingsTable('QB')">QB (Top 30)</button>
        <button class="pos-btn" onclick="renderRankingsTable('RB')">RB (Top 41)</button>
        <button class="pos-btn" onclick="renderRankingsTable('WR')">WR (Top 54)</button>
        <button class="pos-btn" onclick="renderRankingsTable('TE')">TE (Top 26)</button>
      </div>
      
      <div class="table-container">
        <table id="rankingsTable">
          <thead>
            <tr>
              <th>Rank</th>
              <th>Player</th>
              <th>Avg Score</th>
              <th>Games</th>
              <th>FP Acc</th>
              <th>Week {nw} Proj</th>
            </tr>
          </thead>
          <tbody></tbody>
        </table>
      </div>
    </div>
    
    <!-- Waiver Tab -->
    <div id="waiver" class="tab-content">
      <div class="filters">
        <div class="filter-group">
          <label>Min Projection:</label>
          <input type="number" id="minProj" value="8" step="1" oninput="renderWaiverTable()">
        </div>
        <button onclick="renderWaiverTable()">üîÑ Refresh</button>
      </div>
      
      <div class="table-container">
        <table id="waiverTable">
          <thead>
            <tr>
              <th>Priority</th>
              <th>Player</th>
              <th>Pos</th>
              <th>Week {nw} Proj</th>
              <th>Tier</th>
              <th>Trend</th>
              <th>FP Acc</th>
            </tr>
          </thead>
          <tbody></tbody>
        </table>
      </div>
    </div>
    
    <!-- Lineups Tab -->
    <div id="lineups" class="tab-content">
      <div class="control-group" style="margin-bottom: 20px;">
        <label>Select Team:</label>
        <select id="teamSelector" style="max-width: 300px;">
          <option value="">Connect to Sleeper first</option>
        </select>
      </div>
      
      <div class="lineup-config">
        <div class="control-group">
          <label>QB:</label>
          <input type="number" id="qbSlots" value="1" min="0" max="3">
        </div>
        <div class="control-group">
          <label>RB:</label>
          <input type="number" id="rbSlots" value="2" min="0" max="4">
        </div>
        <div class="control-group">
          <label>WR:</label>
          <input type="number" id="wrSlots" value="2" min="0" max="4">
        </div>
        <div class="control-group">
          <label>TE:</label>
          <input type="number" id="teSlots" value="1" min="0" max="3">
        </div>
        <div class="control-group">
          <label>FLEX:</label>
          <input type="number" id="flexSlots" value="1" min="0" max="3">
        </div>
      </div>
      
      <button onclick="generateOptimalLineup()">‚ö° Generate Optimal Lineup</button>
      
      <div class="lineup-results" id="lineupResults"></div>
    </div>
    
    <!-- Matchups Tab -->
    <div id="matchups" class="tab-content">
      <div style="text-align: center; padding: 40px; background: rgba(255,255,255,0.05); border-radius: 10px;">
        <h2>‚öîÔ∏è Matchup Simulator</h2>
        <p style="margin-top: 10px; color: #bdc3c7;">Coming soon! Head-to-head matchup analysis and win probability.</p>
      </div>
    </div>
    
    <!-- Historical Tab -->
    <div id="historical" class="tab-content">
      <div id="historicalTables"></div>
    </div>
  </div>
</div>

<script>
// ==================== EMBEDDED DATA ====================
const HISTORICAL_DATA = {hist_json};
const SEASON_2025 = {season_json};
const WEEKLY_PROJECTIONS = {proj_json};
const CURRENT_WEEK = {cw};
const NEXT_WEEK = {nw};

// ==================== GLOBAL STATE ====================
let CURRENT_SCORING = 'PPR';
let FP_ACCURACY = {{}};
let POSITION_ACCURACY = {{ QB: {{}}, RB: {{}}, WR: {{}}, TE: {{}} }};
let PROJECTIONS = [];
let ALL_ROSTERED = new Set();
let USER_ROSTER = [];
let SLEEPER_DATA = null;

// ==================== UTILITY FUNCTIONS ====================
function normalizePlayerName(name) {{
  return name.toLowerCase()
    .replace(/\s+(jr|sr|ii|iii|iv|v)\.?$/i, '')
    .replace(/[^a-z0-9\s]/g, '')
    .replace(/\s+/g, ' ')
    .trim();
}}

function pearsonCorrelation(x, y) {{
  if (x.length !== y.length || x.length === 0) return 0;
  
  const n = x.length;
  const sumX = x.reduce((a, b) => a + b, 0);
  const sumY = y.reduce((a, b) => a + b, 0);
  const sumXY = x.reduce((sum, xi, i) => sum + xi * y[i], 0);
  const sumX2 = x.reduce((sum, xi) => sum + xi * xi, 0);
  const sumY2 = y.reduce((sum, yi) => sum + yi * yi, 0);
  
  const numerator = n * sumXY - sumX * sumY;
  const denominator = Math.sqrt((n * sumX2 - sumX * sumX) * (n * sumY2 - sumY * sumY));
  
  return denominator === 0 ? 0 : numerator / denominator;
}}

// ==================== CORE CALCULATIONS ====================
function calculatePositionalBaselines() {{
  const baselines = {{}};
  
  ['QB', 'RB', 'WR', 'TE'].forEach(pos => {{
    const historicalPlayers = HISTORICAL_DATA[CURRENT_SCORING]['2024'] || [];
    const posPlayers = historicalPlayers
      .filter(p => p.pos === pos)
      .map(p => {{
        const weeks = Object.values(p.w);
        const avg = weeks.length > 0 ? weeks.reduce((a,b) => a+b, 0) / weeks.length : 0;
        return avg;
      }})
      .filter(avg => avg > 0)
      .sort((a,b) => b - a);
    
    // Store top 100 averages for each position
    baselines[pos] = posPlayers.slice(0, 100);
  }});
  
  return baselines;
}}
function calculateFPAccuracy() {{
  FP_ACCURACY = {{}};
  const POSITION_ACCURACY = {{ QB: [], RB: [], WR: [], TE: [] }};
  
  if (!SEASON_2025 || !SEASON_2025.data) return;
  
  const seasonData = SEASON_2025.data;
  const weekNums = Object.keys(WEEKLY_PROJECTIONS).map(Number).sort((a,b) => a-b);
  
  // First pass: Calculate positional ranks for each week's actual scores
  const weeklyRanks = {{}};
  weekNums.forEach(weekNum => {{
    weeklyRanks[weekNum] = {{ QB: [], RB: [], WR: [], TE: [] }};
    
    // Collect all scores by position
    seasonData.forEach(player => {{
      const score = player.w[weekNum];
      if (score !== undefined && score > 0) {{
        weeklyRanks[weekNum][player.pos].push({{ name: player.p, score: score }});
      }}
    }});
    
    // Sort and assign ranks
    ['QB', 'RB', 'WR', 'TE'].forEach(pos => {{
      weeklyRanks[weekNum][pos].sort((a, b) => b.score - a.score);
    }});
  }});
  
  // Second pass: Compare ECR ranks to actual performance ranks
  seasonData.forEach(player => {{
    const name = player.p;
    const weeks = player.w;
    const pos = player.pos;
    
    if (!weeks || Object.keys(weeks).length < 3) return;
    
    const projectedRanks = [];
    const actualRanks = [];
    const weekDetails = {{}};
    
    weekNums.forEach(weekNum => {{
      if (weeks[weekNum] !== undefined && weeks[weekNum] > 0) {{
        const projData = WEEKLY_PROJECTIONS[weekNum];
        if (projData) {{
          const normName = normalizePlayerName(name);
          const proj = projData.find(p => normalizePlayerName(p.p) === normName);
          
          if (proj && proj.ecr > 0) {{
            // Find actual rank for this player this week
            const posPlayers = weeklyRanks[weekNum][pos];
            const actualRank = posPlayers.findIndex(p => normalizePlayerName(p.name) === normName) + 1;
            
            if (actualRank > 0) {{
              projectedRanks.push(proj.ecr);
              actualRanks.push(actualRank);
              weekDetails[weekNum] = {{
                projRank: proj.ecr,
                actualRank: actualRank,
                actualScore: weeks[weekNum],
                rankDiff: actualRank - proj.ecr
              }};
            }}
          }}
        }}
      }}
    }});
    
    if (projectedRanks.length >= 3) {{
      const correlation = pearsonCorrelation(projectedRanks, actualRanks);
      const rankDiffs = projectedRanks.map((p, i) => Math.abs(p - actualRanks[i]));
      const mae = rankDiffs.reduce((a, b) => a + b, 0) / rankDiffs.length;
      const within3 = rankDiffs.filter(d => d <= 3).length / rankDiffs.length;  // Within 3 ranks (stricter)
      const avgDiff = projectedRanks.reduce((sum, p, i) => sum + (actualRanks[i] - p), 0) / projectedRanks.length;
      
      FP_ACCURACY[name] = {{
        position: pos,
        games: projectedRanks.length,
        weeks: weekDetails,
        correlation: correlation,
        mae: mae,
        accuracy: within3,
        avgDiff: avgDiff
      }};
      
      // Track position-level accuracy
      POSITION_ACCURACY[pos].push({{ correlation, mae, within3 }});
    }}
  }});
  
  // Calculate average accuracy by position
  ['QB', 'RB', 'WR', 'TE'].forEach(pos => {{
    const posData = POSITION_ACCURACY[pos];
    if (posData.length > 0) {{
      const avgCorr = posData.reduce((sum, d) => sum + d.correlation, 0) / posData.length;
      const avgMAE = posData.reduce((sum, d) => sum + d.mae, 0) / posData.length;
      const avgWithin3 = posData.reduce((sum, d) => sum + d.within3, 0) / posData.length;
      
      POSITION_ACCURACY[pos] = {{
        avgCorrelation: avgCorr,
        avgMAE: avgMAE,
        avgAccuracy: avgWithin3,
        playerCount: posData.length
      }};
    }}
  }});
  
  console.log(`FP Accuracy calculated for ${{Object.keys(FP_ACCURACY).length}} players`);
  console.log('Position Reliability:', POSITION_ACCURACY);
  
  return POSITION_ACCURACY;
}}

function calculateProjections() {{
  if (!SEASON_2025 || !SEASON_2025.data) return [];
  
  const projections = [];
  const nextWeekECR = WEEKLY_PROJECTIONS[NEXT_WEEK] || [];
  const baselines = calculatePositionalBaselines();  // ‚úÖ Get positional averages
  
  SEASON_2025.data.forEach(player => {{
    const name = player.p;
    const pos = player.pos;
    const weeks = player.w;
    
    if (!weeks || Object.keys(weeks).length === 0) return;
    
    const scores = Object.values(weeks);
    const avgScore = scores.reduce((a, b) => a + b, 0) / scores.length;
    const games = scores.length;
    
    // Find ECR for this player
    const normName = normalizePlayerName(name);
    const ecrData = nextWeekECR.find(p => normalizePlayerName(p.p) === normName);
    
    let proj = avgScore;
    let floor = avgScore * 0.7;
    let ceiling = avgScore * 1.3;
    let hasECR = false;
    let positionRank = 999;
    
    if (ecrData && ecrData.ecr > 0) {{
      hasECR = true;
      positionRank = ecrData.ecr;
      
      // ‚úÖ Convert ECR to points using baseline
      const posBaseline = baselines[pos] || [];
      const ecrIndex = Math.floor(ecrData.ecr) - 1;  // Rank 1 = index 0
      
      if (ecrIndex < posBaseline.length) {{
        proj = posBaseline[ecrIndex];
      }} else {{
        // Extrapolate for ranks beyond our data
        const lastKnown = posBaseline[posBaseline.length - 1] || avgScore;
        const dropPerRank = 0.3;  // Points decrease per rank
        proj = lastKnown - (ecrIndex - posBaseline.length) * dropPerRank;
        proj = Math.max(proj, 3);  // Minimum 3 points
      }}
      
      // ‚úÖ Calculate floor/ceiling from std deviation
      const stdDev = ecrData.std || 5;
      const stdPoints = stdDev * 0.8;  // Convert rank std to points (approx)
      floor = Math.max(proj - stdPoints, proj * 0.5);
      ceiling = proj + stdPoints;
      
      // ‚úÖ Apply position-level reliability
      const posReliability = POSITION_ACCURACY[pos]?.avgCorrelation || 0.5;
      const posMAE = POSITION_ACCURACY[pos]?.avgMAE || 10;
      
      // Weight ECR projection by position reliability
      // High reliability (e.g., RB) = trust ECR more
      // Low reliability (e.g., QB) = blend more with player average
      let reliabilityWeight = Math.max(0.3, Math.min(0.9, posReliability));
      
      // ‚ö†Ô∏è If position has negative correlation, trust player avg more than ECR
      if (posReliability < 0) {{
        reliabilityWeight = 0.3;  // Only 30% weight to ECR if position reliability is broken
      }}
      
      // ‚úÖ Apply player-specific correlation adjustment
      const accuracy = FP_ACCURACY[name];
      if (accuracy && accuracy.games >= 5) {{  // ‚¨ÜÔ∏è Increased from 3 to 5 games minimum
        // If player has strong personal correlation, use it
        if (accuracy.correlation > 0.7) {{
          const playerWeight = 0.7 + (accuracy.correlation - 0.7) * 0.3;
          proj = playerWeight * proj + (1 - playerWeight) * avgScore;
        }} else if (accuracy.correlation < 0) {{
          // Negative correlation - heavily favor player average
          proj = 0.3 * proj + 0.7 * avgScore;
        }} else {{
          // Otherwise blend using position reliability
          proj = reliabilityWeight * proj + (1 - reliabilityWeight) * avgScore;
        }}
        
        // ‚ö†Ô∏è DISABLED - Bias adjustment was too aggressive and double-penalized players
        // Experts already adjust ECR based on recent performance, so we don't need to
        /*
        // Adjust for consistent rank bias (over/under-ranking)
        if (Math.abs(accuracy.avgDiff) > 3) {{
          // Convert rank difference to approximate point adjustment
          const pointsPerRank = proj / (ecrData.ecr || 10);
          const adjustment = -accuracy.avgDiff * pointsPerRank * 0.3;
          proj += adjustment;
        }}
        */
      }} else {{
        // No player history OR not enough games - use position reliability only
        proj = reliabilityWeight * proj + (1 - reliabilityWeight) * avgScore;
      }}
    }}
    
    projections.push({{
      p: name,
      pos: pos,
      proj: proj,
      floor: floor,
      ceiling: ceiling,
      avgScore: avgScore,
      games: games,
      hasECR: hasECR,
      ecrRank: positionRank,
      correlation: FP_ACCURACY[name]?.correlation || 0,
      mae: FP_ACCURACY[name]?.mae || 0,
      avgDiff: FP_ACCURACY[name]?.avgDiff || 0,
      accuracy: FP_ACCURACY[name]?.accuracy || 0
    }});
  }});
  
  // Sort by projection
  projections.sort((a, b) => b.proj - a.proj);
  
  // Assign ranks and tiers
  const posCounts = {{ QB: 0, RB: 0, WR: 0, TE: 0 }};
  projections.forEach(p => {{
    posCounts[p.pos]++;
    p.rank = posCounts[p.pos];
    
    // Assign tier based on rank
    const rank = p.rank;
    if (p.pos === 'QB') {{
      if (rank <= 6) p.tier = 'Elite';
      else if (rank <= 12) p.tier = 'High';
      else if (rank <= 24) p.tier = 'Mid';
      else p.tier = 'Stream';
    }} else if (p.pos === 'RB') {{
      if (rank <= 12) p.tier = 'Elite';
      else if (rank <= 24) p.tier = 'High';
      else if (rank <= 36) p.tier = 'Mid';
      else p.tier = 'Stream';
    }} else if (p.pos === 'WR') {{
      if (rank <= 12) p.tier = 'Elite';
      else if (rank <= 24) p.tier = 'High';
      else if (rank <= 36) p.tier = 'Mid';
      else p.tier = 'Stream';
    }} else if (p.pos === 'TE') {{
      if (rank <= 6) p.tier = 'Elite';
      else if (rank <= 12) p.tier = 'High';
      else if (rank <= 20) p.tier = 'Mid';
      else p.tier = 'Stream';
    }}
  }});
  
  return projections;
}}

// ==================== RENDERING FUNCTIONS ====================
function updateMetrics() {{
  const cards = [
    {{ label: 'Total Players', value: PROJECTIONS.length }},
    {{ label: 'With FP Data', value: PROJECTIONS.filter(p => p.hasECR).length }},
    {{ label: 'High Accuracy', value: Object.values(FP_ACCURACY).filter(a => a.correlation > 0.7).length }},
    {{ label: 'My Roster', value: USER_ROSTER.length }},
    {{ label: 'Available', value: PROJECTIONS.filter(p => !isRostered(p.p)).length }}
  ];
  
  const html = cards.map(card => `
    <div class="stat-card">
      <h3>${{card.label}}</h3>
      <div class="value">${{card.value}}</div>
    </div>
  `).join('');
  
  document.getElementById('statsCards').innerHTML = html;
}}

function renderProjectionsTable() {{
  const posFilter = document.getElementById('posFilter').value;
  const rosterFilter = document.getElementById('rosterFilter').value;
  const searchTerm = document.getElementById('searchBox').value.toLowerCase();
  
  let filtered = PROJECTIONS.filter(p => {{
    if (posFilter !== 'ALL' && p.pos !== posFilter) return false;
    if (rosterFilter === 'MY_ROSTER' && !isOnRoster(p.p)) return false;
    if (rosterFilter === 'AVAILABLE' && isRostered(p.p)) return false;
    if (searchTerm && !p.p.toLowerCase().includes(searchTerm)) return false;
    return true;
  }});
  
  const tbody = document.getElementById('projectionsTable').querySelector('tbody');
  tbody.innerHTML = filtered.map(p => {{
    const trend = p.avgDiff > 2 ? 'üìà' : p.avgDiff < -2 ? 'üìâ' : '‚û°Ô∏è';
    const trendClass = p.avgDiff > 2 ? 'trend-up' : p.avgDiff < -2 ? 'trend-down' : 'trend-stable';
    const roster = isOnRoster(p.p) ? 'üè†' : '';
    const rowClass = isOnRoster(p.p) ? 'my-roster' : isRostered(p.p) ? 'rostered' : '';
    
    return `
      <tr class="pos-${{p.pos}} ${{rowClass}}">
        <td>${{roster}} ${{p.p}}</td>
        <td>${{p.pos}}</td>
        <td>${{p.rank}}</td>
        <td><strong>${{p.proj.toFixed(1)}}</strong></td>
        <td>${{p.floor.toFixed(1)}} - ${{p.ceiling.toFixed(1)}}</td>
        <td><span class="badge ${{p.tier.toLowerCase()}}">${{p.tier}}</span></td>
        <td>${{p.accuracy ? (p.accuracy * 100).toFixed(0) + '%' : '-'}}</td>
        <td class="${{trendClass}}">${{trend}}</td>
      </tr>
    `;
  }}).join('');
}}

function renderReliabilityTable() {{
  const data = Object.entries(FP_ACCURACY)
    .filter(([name, stats]) => stats.games >= 3)
    .map(([name, stats]) => ({{ name, ...stats }}))
    .sort((a, b) => b.correlation - a.correlation);
  
  const tbody = document.getElementById('reliabilityTable').querySelector('tbody');
  tbody.innerHTML = data.map(p => {{
        const playerData = SEASON_2025.data.find(pd => pd.p === p.name);
        let avgScore = 0;
        if (playerData && playerData.w) {{
          const scores = Object.values(playerData.w);
          avgScore = scores.reduce((a,b) => a+b, 0) / scores.length;
        }}
    const diffClass = p.avgDiff > 0 ? 'trend-up' : p.avgDiff < 0 ? 'trend-down' : 'trend-stable';
    
    return `
      <tr class="pos-${{p.position}}">
        <td>${{p.name}}</td>
        <td>${{p.position}}</td>
        <td>${{p.games}}</td>
        <td><strong>${{(p.correlation * 100).toFixed(0)}}%</strong></td>
        <td>${{p.mae.toFixed(2)}}</td>
        <td>${{(p.accuracy * 100).toFixed(0)}}%</td>
        <td>${{avgScore.toFixed(1)}}</td>
        <td class="${{diffClass}}">${{p.avgDiff > 0 ? '+' : ''}}${{p.avgDiff.toFixed(1)}}</td>
      </tr>
    `;
  }}).join('');
}}

function renderRankingsTable(position) {{
  document.querySelectorAll('.pos-btn').forEach(btn => btn.classList.remove('active'));
  const buttons = document.querySelectorAll('.pos-btn');
  buttons.forEach(btn => {{
    if (btn.textContent.includes(position)) {{  // ‚úÖ Find button by position
      btn.classList.add('active');
    }}
  }});
  
  const limits = {{ QB: 30, RB: 41, WR: 54, TE: 26 }};
  const limit = limits[position] || 30;
  
  const filtered = PROJECTIONS
    .filter(p => p.pos === position)
    .slice(0, limit);
  
  const tbody = document.getElementById('rankingsTable').querySelector('tbody');
  tbody.innerHTML = filtered.map(p => `
    <tr class="pos-${{p.pos}}">
      <td><strong>${{p.rank}}</strong></td>
      <td>${{p.p}}</td>
      <td>${{p.avgScore.toFixed(1)}}</td>
      <td>${{p.games}}</td>
      <td>${{(p.correlation * 100).toFixed(0)}}%</td>
      <td><strong>${{p.proj.toFixed(1)}}</strong></td>
    </tr>
  `).join('');
}}

function renderWaiverTable() {{
  const minProj = parseFloat(document.getElementById('minProj').value) || 0;
  
  const available = PROJECTIONS
    .filter(p => !isRostered(p.p) && p.proj >= minProj)
    .sort((a, b) => b.proj - a.proj)
    .slice(0, 30);
  
  const tbody = document.getElementById('waiverTable').querySelector('tbody');
  tbody.innerHTML = available.map((p, idx) => {{
    const priority = idx < 5 ? 'üî•' : idx < 15 ? '‚≠ê' : 'üëÄ';
    const priorityClass = idx < 5 ? 'priority-hot' : idx < 15 ? 'priority-star' : 'priority-watch';
    const trend = p.avgDiff > 2 ? 'üìà' : p.avgDiff < -2 ? 'üìâ' : '‚û°Ô∏è';
    const trendClass = p.avgDiff > 2 ? 'trend-up' : p.avgDiff < -2 ? 'trend-down' : 'trend-stable';
    
    return `
      <tr class="pos-${{p.pos}}">
        <td class="${{priorityClass}}">${{priority}}</td>
        <td><strong>${{p.p}}</strong></td>
        <td>${{p.pos}}</td>
        <td><strong>${{p.proj.toFixed(1)}}</strong></td>
        <td><span class="badge ${{p.tier.toLowerCase()}}">${{p.tier}}</span></td>
        <td class="${{trendClass}}">${{trend}}</td>
        <td>${{(p.correlation * 100).toFixed(0)}}%</td>
      </tr>
    `;
  }}).join('');
}}

function renderHistoricalTable() {{
  const positions = ['QB', 'RB', 'WR', 'TE'];
  const container = document.getElementById('historicalTables');
  
  const html = positions.map(pos => {{
    const posData = {{}};
    
    // Calculate averages for each rank across years
    ['2022', '2023', '2024'].forEach(year => {{
      const yearData = HISTORICAL_DATA[CURRENT_SCORING][year] || [];
      const posPlayers = yearData.filter(p => p.pos === pos);
      
      posPlayers.forEach((player, idx) => {{
        const rank = idx + 1;
        if (rank > 24) return;
        
        const weeks = Object.values(player.w);
        if (weeks.length === 0) return;
        
        const avg = weeks.reduce((a, b) => a + b, 0) / weeks.length;
        
        if (!posData[rank]) posData[rank] = {{}};
        posData[rank][year] = avg;
      }});
    }});
    
    // Calculate 3-year averages
    const rows = Object.entries(posData)
      .sort((a, b) => parseInt(a[0]) - parseInt(b[0]))
      .map(([rank, years]) => {{
        const vals = Object.values(years);
        const avg3yr = vals.length > 0 ? vals.reduce((a,b) => a+b, 0) / vals.length : 0;
        
        return `
          <tr class="pos-${{pos}}">
            <td><strong>${{rank}}</strong></td>
            <td>${{years['2022']?.toFixed(1) || '-'}}</td>
            <td>${{years['2023']?.toFixed(1) || '-'}}</td>
            <td>${{years['2024']?.toFixed(1) || '-'}}</td>
            <td><strong>${{avg3yr.toFixed(1)}}</strong></td>
          </tr>
        `;
      }}).join('');
    
    return `
      <div class="historical-section">
        <h3>${{pos}} Historical Averages (Top 24)</h3>
        <div class="table-container">
          <table>
            <thead>
              <tr>
                <th>Rank</th>
                <th>2022</th>
                <th>2023</th>
                <th>2024</th>
                <th>3-Yr Avg</th>
              </tr>
            </thead>
            <tbody>${{rows}}</tbody>
          </table>
        </div>
      </div>
    `;
  }}).join('');
  
  container.innerHTML = html;
}}

// ==================== SLEEPER INTEGRATION ====================
async function connectToSleeper() {{
  const username = document.getElementById('sleeperUsername').value.trim();
  const leagueId = document.getElementById('leagueId').value.trim();
  const statusDiv = document.getElementById('statusMessage');
  
  if (!username || !leagueId) {{
    statusDiv.innerHTML = '<div class="status error">Please enter both username and league ID</div>';
    return;
  }}
  
  statusDiv.innerHTML = '<div class="status">Connecting to Sleeper...</div>';
  
  try {{
    // Fetch user
    const userRes = await fetch(`https://api.sleeper.app/v1/user/${{username}}`);
    if (!userRes.ok) throw new Error('User not found');
    const userData = await userRes.json();
    
    // Fetch rosters
    const rostersRes = await fetch(`https://api.sleeper.app/v1/league/${{leagueId}}/rosters`);
    if (!rostersRes.ok) throw new Error('League not found');
    const rosters = await rostersRes.json();
    
    // Fetch users
    const usersRes = await fetch(`https://api.sleeper.app/v1/league/${{leagueId}}/users`);
    const users = await usersRes.json();
    
    // Fetch NFL players
    const playersRes = await fetch('https://api.sleeper.app/v1/players/nfl');
    const allPlayers = await playersRes.json();
    
    // Build rostered sets
    ALL_ROSTERED.clear();
    rosters.forEach(roster => {{
      (roster.players || []).forEach(pid => ALL_ROSTERED.add(pid));
    }});
    
    // Find my roster
    const myRoster = rosters.find(r => r.owner_id === userData.user_id);
    if (!myRoster) throw new Error('You are not in this league');
    
    USER_ROSTER = (myRoster.players || []).map(pid => {{
      const p = allPlayers[pid];
      return p ? p.full_name : null;
    }}).filter(Boolean);
    
    // Store data
    SLEEPER_DATA = {{ rosters, users, players: allPlayers, myRoster }};
    
    // Populate team selector
    populateTeamSelector(rosters, users);
    
    statusDiv.innerHTML = `<div class="status success">‚úÖ Connected! Found ${{USER_ROSTER.length}} players on your roster</div>`;
    
    // Re-render tables
    updateMetrics();
    renderProjectionsTable();
    renderWaiverTable();
    
  }} catch (error) {{
    statusDiv.innerHTML = `<div class="status error">‚ùå Error: ${{error.message}}</div>`;
  }}
}}

function populateTeamSelector(rosters, users) {{
  const selector = document.getElementById('teamSelector');
  selector.innerHTML = rosters.map((roster, idx) => {{
    const user = users.find(u => u.user_id === roster.owner_id);
    const name = user ? user.display_name : `Team ${{idx + 1}}`;
    return `<option value="${{idx}}">${{name}}</option>`;
  }}).join('');
}}

function isOnRoster(playerName) {{
  const norm = normalizePlayerName(playerName);
  return USER_ROSTER.some(rp => normalizePlayerName(rp) === norm);
}}

function isRostered(playerName) {{
  if (!SLEEPER_DATA) return false;
  
  const norm = normalizePlayerName(playerName);
  const players = SLEEPER_DATA.players;
  
  for (const [pid, player] of Object.entries(players)) {{
    if (player.full_name && normalizePlayerName(player.full_name) === norm) {{
      return ALL_ROSTERED.has(pid);
    }}
  }}
  
  return false;
}}

// ==================== LINEUP OPTIMIZER ====================
function generateOptimalLineup() {{
  const teamIdx = parseInt(document.getElementById('teamSelector').value);
  if (isNaN(teamIdx) || !SLEEPER_DATA) {{
    alert('Please connect to Sleeper first');
    return;
  }}
  
  const roster = SLEEPER_DATA.rosters[teamIdx];
  const players = SLEEPER_DATA.players;
  
  // Get roster players with projections
  const rosterPlayers = (roster.players || []).map(pid => {{
    const p = players[pid];
    if (!p || !p.full_name) return null;
    
    const proj = PROJECTIONS.find(pr => normalizePlayerName(pr.p) === normalizePlayerName(p.full_name));
    return proj ? {{ ...proj, sleeperPos: p.position }} : null;
  }}).filter(Boolean);
  
  // Get slot counts
  const qbSlots = parseInt(document.getElementById('qbSlots').value) || 0;
  const rbSlots = parseInt(document.getElementById('rbSlots').value) || 0;
  const wrSlots = parseInt(document.getElementById('wrSlots').value) || 0;
  const teSlots = parseInt(document.getElementById('teSlots').value) || 0;
  const flexSlots = parseInt(document.getElementById('flexSlots').value) || 0;
  
  // Separate by position
  const byPos = {{
    QB: rosterPlayers.filter(p => p.pos === 'QB').sort((a,b) => b.proj - a.proj),
    RB: rosterPlayers.filter(p => p.pos === 'RB').sort((a,b) => b.proj - a.proj),
    WR: rosterPlayers.filter(p => p.pos === 'WR').sort((a,b) => b.proj - a.proj),
    TE: rosterPlayers.filter(p => p.pos === 'TE').sort((a,b) => b.proj - a.proj)
  }};
  
  // Fill starters
  const starters = {{
    QB: byPos.QB.slice(0, qbSlots),
    RB: byPos.RB.slice(0, rbSlots),
    WR: byPos.WR.slice(0, wrSlots),
    TE: byPos.TE.slice(0, teSlots),
    FLEX: []
  }};
  
  // Fill FLEX with best remaining
  const flexPool = [
    ...byPos.RB.slice(rbSlots),
    ...byPos.WR.slice(wrSlots),
    ...byPos.TE.slice(teSlots)
  ].sort((a,b) => b.proj - a.proj);
  
  starters.FLEX = flexPool.slice(0, flexSlots);
  
  // Calculate total
  const allStarters = [...starters.QB, ...starters.RB, ...starters.WR, ...starters.TE, ...starters.FLEX];
  const totalProj = allStarters.reduce((sum, p) => sum + p.proj, 0);
  const totalFloor = allStarters.reduce((sum, p) => sum + p.floor, 0);
  const totalCeiling = allStarters.reduce((sum, p) => sum + p.ceiling, 0);
  
  // Get bench
  const starterNames = new Set(allStarters.map(p => p.p));
  const bench = rosterPlayers.filter(p => !starterNames.has(p.p));
  
  // Render results
  const resultsDiv = document.getElementById('lineupResults');
  
  const startersHtml = Object.entries(starters).map(([pos, players]) => {{
    if (players.length === 0) return '';
    
    return `
      <div class="starter-card pos-${{pos}}">
        <h4>${{pos}}</h4>
        ${{players.map(p => `
          <div style="margin-top: 8px;">
            <strong>${{p.p}}</strong><br>
            <span style="font-size: 0.9em;">
              Proj: ${{p.proj.toFixed(1)}} (${{p.floor.toFixed(1)}}-${{p.ceiling.toFixed(1)}})
            </span>
          </div>
        `).join('')}}
      </div>
    `;
  }}).join('');
  
  const benchHtml = bench.map(p => `
    <div style="padding: 10px; background: rgba(255,255,255,0.05); border-radius: 5px; border-left: 3px solid #95a5a6;">
      <strong>${{p.p}}</strong> (${{p.pos}}) - ${{p.proj.toFixed(1)}}
    </div>
  `).join('');
  
  resultsDiv.innerHTML = `
    <div style="background: rgba(52,152,219,0.2); border: 2px solid #3498db; border-radius: 10px; padding: 15px; margin-bottom: 20px;">
      <h3>üìä Total Projection</h3>
      <div style="font-size: 2em; font-weight: bold; color: #3498db;">${{totalProj.toFixed(1)}}</div>
      <div style="margin-top: 5px; color: #bdc3c7;">Range: ${{totalFloor.toFixed(1)}} - ${{totalCeiling.toFixed(1)}}</div>
    </div>
    
    <h3 style="margin-bottom: 15px;">‚ö° Starters</h3>
    <div class="starters-grid">${{startersHtml}}</div>
    
    <div class="bench-section">
      <h3>üí∫ Bench (${{bench.length}})</h3>
      <div class="bench-list">${{benchHtml || '<p style="color: #95a5a6;">No bench players</p>'}}</div>
    </div>
  `;
}}

// ==================== TAB SWITCHING ====================
function switchTab(tabName) {{
  // Update buttons
  document.querySelectorAll('.tab-btn').forEach(btn => btn.classList.remove('active'));
  event.target.classList.add('active');
  
  // Update content
  document.querySelectorAll('.tab-content').forEach(content => content.classList.remove('active'));
  document.getElementById(tabName).classList.add('active');
}}

// ==================== SORTING ====================
let sortColumn = 'correlation';
let sortDirection = 'desc';

function sortReliability(column) {{
  if (sortColumn === column) {{
    sortDirection = sortDirection === 'asc' ? 'desc' : 'asc';
  }} else {{
    sortColumn = column;
    sortDirection = 'desc';
  }}
  
  // Update header classes
  document.querySelectorAll('#reliabilityTable th').forEach(th => {{
    th.classList.remove('sort-asc', 'sort-desc');
  }});
  
  const th = event.target;
  th.classList.add(sortDirection === 'asc' ? 'sort-asc' : 'sort-desc');
  
  renderReliabilityTable();
}}

// ==================== INITIALIZATION ====================
document.addEventListener('DOMContentLoaded', () => {{
  console.log('üèà Fantasy Dashboard V3.4 Loaded');
  console.log('Data:', {{
    historical: Object.keys(HISTORICAL_DATA.PPR).length,
    season: SEASON_2025.data.length,
    projections: Object.keys(WEEKLY_PROJECTIONS).length
  }});
  
  // Calculate everything
  POSITION_ACCURACY = calculateFPAccuracy();
  console.log('üìä ECR Accuracy Stats:');
  console.log(`  Players with ECR history: ${{Object.keys(FP_ACCURACY).length}}`);
  console.log('  Position reliability:', POSITION_ACCURACY);
  
  PROJECTIONS = calculateProjections();
  console.log(`üìà Generated ${{PROJECTIONS.length}} projections`);
  console.log(`  With ECR: ${{PROJECTIONS.filter(p => p.hasECR).length}}`);
  
  // Debug: Show a few example projections
  const examples = ['Ladd McConkey', 'Jordan Addison', 'Puka Nacua'];
  examples.forEach(name => {{
    const p = PROJECTIONS.find(proj => proj.p === name);
    if (p) {{
      const acc = FP_ACCURACY[name];
      console.log(`  ${{name}}: ${{p.proj.toFixed(1)}} pts (ECR: WR${{p.ecrRank}}, Avg: ${{p.avgScore.toFixed(1)}}, Corr: ${{acc?.correlation.toFixed(2) || 'N/A'}})`);
    }}
  }});
  
  // Initial render
  updateMetrics();
  renderProjectionsTable();
  renderReliabilityTable();
  renderRankingsTable('QB');
  renderWaiverTable();
  renderHistoricalTable();
  
  console.log('‚úÖ Dashboard ready!');
}});

// Scoring format change handler
document.getElementById('scoringFormat').addEventListener('change', (e) => {{
  CURRENT_SCORING = e.target.value;
  console.log('Switched to', CURRENT_SCORING);
  
  // Recalculate with new scoring
  calculateFPAccuracy();
  PROJECTIONS = calculateProjections();
  
  // Re-render everything
  updateMetrics();
  renderProjectionsTable();
  renderReliabilityTable();
  renderRankingsTable('QB');
  renderWaiverTable();
  renderHistoricalTable();
}});
</script>

</body>
</html>'''
    
    return html


def main():
    print("=" * 60)
    print("üèà FF Dashboard Generator V3.4 - COMPLETE EDITION")
    print("=" * 60)
    
    historical = load_all_historical_data()
    current = load_current_season()
    projections = load_weekly_projections()
    
    print("\nüî® Generating complete HTML with full UI...")
    html = generate_complete_html(historical, current, projections)
    
    with open(OUTPUT_FILE, 'w', encoding='utf-8') as f:
        f.write(html)
    
    size_mb = Path(OUTPUT_FILE).stat().st_size / (1024 * 1024)
    print(f"\n‚úÖ SUCCESS!")
    print(f"üìÑ {OUTPUT_FILE} ({size_mb:.2f} MB)")
    print("\nüéØ Features included:")
    print("  ‚úÖ 7 fully functional tabs")
    print("  ‚úÖ FantasyPros projection integration")
    print("  ‚úÖ Sleeper API connection")
    print("  ‚úÖ Lineup optimizer")
    print("  ‚úÖ Waiver wire analysis")
    print("  ‚úÖ Reliability tracking")
    print("  ‚úÖ Historical averages")
    print("=" * 60)


if __name__ == "__main__":
    main()
